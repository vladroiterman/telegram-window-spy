import json
import os
import requests
import asyncio
import logging
import time
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = ""
COMPUTERS_FILE = "computers.json"
TEMP_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'temp')
os.makedirs(TEMP_DIR, exist_ok=True)

#ID
AdminID = 5183977020
AllowedID ={AdminID}
#–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
async def send_startup_notification(application):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ AdminID –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏ —è–≤–ª—è–µ—Ç—Å—è –¥–æ–ø—É—Å—Ç–∏–º—ã–º —á–∏—Å–ª–æ–º
        admin_id = AdminID
        if not isinstance(admin_id, int) or admin_id <= 0:
            logger.warning("AdminID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            return

        await application.bot.send_message(
            chat_id=admin_id,
            text="ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è post_init –≤ bot.txt
async def post_init(application):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    await application.bot.set_my_commands([
        ("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        ("cmd", "–í–æ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"),
        ("history", "–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥"),
        ("cancel", "–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–º–∞–Ω–¥—É")
    ])
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ
    await send_startup_notification(application) # <-- –î–æ–±–∞–≤–ª–µ–Ω –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–∞–º–∏
ACTIVE_COMMANDS = {}
COMMAND_HISTORY = {}

def load_computers():
    if not os.path.exists(COMPUTERS_FILE):
        return {}
    try:
        with open(COMPUTERS_FILE, "r", encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤: {e}")
        return {}

async def check_computer_status(ip: str) -> bool:
    try:
        response = requests.get(f'http://{ip}:5000/status', timeout=5)
        return response.status_code == 200
    except Exception as e:

        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ {ip}: {e}")
        return False


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE): # <-- context –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å—é–¥–∞ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
    try:
        computers = load_computers()
        if not computers:
            await update.message.reply_text("üîç –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤")
            return
        status_messages = []
        for name, ip in computers.items():
            is_online = await check_computer_status(ip) # <-- –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞
            status = "üü¢ –û–Ω–ª–∞–π–Ω" if is_online else "üî¥ –û—Ñ—Ñ–ª–∞–π–Ω"
            status_messages.append(f"{name} ({ip}) - {status}")
        await update.message.reply_text("üìä –°—Ç–∞—Ç—É—Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤:\n" + "\n".join(status_messages)) # –ò—Å–ø—Ä–∞–≤–∏–ª \ –Ω–∞ \n
        
        keyboard = [
            [InlineKeyboardButton(f"{name} ({ip})", callback_data=f"select_{name}")]
            for name, ip in computers.items()
        ]
        await update.message.reply_text(
            "üñ• –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä:",
            reply_markup=InlineKeyboardMarkup(keyboard))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}") # <-- –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º context –≤ –ª–æ–≥–µ
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")


async def show_processes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        ip = context.user_data.get('selected_pc')
        if not ip:
            await update.message.reply_text('‚ùå –ö–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω!')
            return
        
        message = await update.message.reply_text("üîÑ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
        
        response = requests.post(
            f'http://{ip}:5000/process',
            json={'action': 'list'},
            timeout=20
        )
        
        if response.status_code != 200:
            raise Exception('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É')
            
        data = response.json()
        if data.get('status') != 'success':
            raise Exception(data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
        
        processes = data.get('processes', [])
        if not processes:
            await message.edit_text('‚Ñπ –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤')
            return
        
        chunks = []
        current_chunk = []
        current_length = 0
        
        header = "üìä –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–∞–º—è—Ç–∏):\nPID | –ò–º—è | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å | CPU% | –ü–∞–º—è—Ç—å(MB)\n"
        current_chunk.append(header)
        current_length += len(header)
        
        for proc in processes:
            line = f"{proc['pid']} | {proc['name']} | {proc['user']} | {proc['cpu']}% | {proc['memory']}MB\n"
            if current_length + len(line) > 4000:
                chunks.append(''.join(current_chunk))
                current_chunk = [line]
                current_length = len(line)
            else:
                current_chunk.append(line)
                current_length += len(line)
        
        if current_chunk:
            chunks.append(''.join(current_chunk))
        
        await message.delete()
        first_message = chunks[0] + f"\n–í—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(processes)}"
        sent_message = await update.message.reply_text(first_message)
        
        if len(chunks) > 1:
            context.user_data['process_chunks'] = chunks
            context.user_data['current_chunk'] = 0
            context.user_data['process_message_id'] = sent_message.message_id
            
            keyboard = [
                [InlineKeyboardButton("‚û° –°–ª–µ–¥—É—é—â–∏–µ", callback_data="next_processes")]
            ]
            await sent_message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
                reply_markup=InlineKeyboardMarkup(keyboard))
        
        instructions = (
            "\n\n–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –≤–≤–µ–¥–∏—Ç–µ:\n"
            "1. –ü–æ PID: `[PID] [–¥–µ–π—Å—Ç–≤–∏–µ]`\n"
            "2. –ü–æ –∏–º–µ–Ω–∏: `[–∏–º—è.exe] [–¥–µ–π—Å—Ç–≤–∏–µ] -n`\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "`1234 kill` - –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ PID\n"
            "`explorer.exe kill -n` - –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã explorer.exe\n"
            "`5678 restart` - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ PID"
        )
        await update.message.reply_text(instructions, parse_mode='Markdown')
        context.user_data['waiting_process_action'] = True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
        await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {str(e)}')

async def handle_process_pagination(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    chunks = context.user_data.get('process_chunks')
    current = context.user_data.get('current_chunk', 0)
    message_id = context.user_data.get('process_message_id')
    
    if not chunks or message_id is None:
        await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —É—Å—Ç–∞—Ä–µ–ª–∏")
        return
    
    if query.data == "next_processes":
        current += 1
        if current >= len(chunks):
            current = 0
    elif query.data == "prev_processes":
        current -= 1
        if current < 0:
            current = len(chunks) - 1
    
    context.user_data['current_chunk'] = current
    
    keyboard = []
    if len(chunks) > 1:
        keyboard.append([
            InlineKeyboardButton("‚¨Ö –ü—Ä–µ–¥—ã–¥—É—â–∏–µ", callback_data="prev_processes"),
            InlineKeyboardButton("‚û° –°–ª–µ–¥—É—é—â–∏–µ", callback_data="next_processes")
        ])
    
    try:
        await query.edit_message_text(
            chunks[current],
            reply_markup=InlineKeyboardMarkup(keyboard) if keyboard else None
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")

async def handle_process_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text.strip()
        parts = text.split()
        if len(parts) < 2:
            raise ValueError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã')
            
        ip = context.user_data.get('selected_pc')
        if not ip:
            raise Exception('–ö–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω')
        
        if parts[-1] == '-n':
            operation = parts[-2]
            name = ' '.join(parts[:-2])
            if not name or operation not in ('kill', 'restart'):
                raise ValueError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏')
                
            response = requests.post(
                f'http://{ip}:5000/process',
                json={
                    'action': 'manage',
                    'name': name,
                    'operation': operation
                },
                timeout=10
            )
        else:
            pid, operation = parts[:2]
            if not pid.isdigit() or operation not in ('kill', 'restart'):
                raise ValueError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ PID')
                
            response = requests.post(
                f'http://{ip}:5000/process',
                json={
                    'action': 'manage',
                    'pid': pid,
                    'operation': operation
                },
                timeout=10
            )
        
        if response.status_code != 200:
            raise Exception('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É')
            
        data = response.json()
        if data.get('status') != 'success':
            raise Exception(data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
        if data['message'] == 'error':
            raise Exception(data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
        if data['message'] == '‚úÖerror':
            raise Exception(data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
        
        await update.message.reply_text(f"‚úÖ {data['message']}")
        
    except ValueError as e:
        await update.message.reply_text(
            f'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {str(e)}\n\n'
            '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n'
            '1. –ü–æ PID: "[PID] [–¥–µ–π—Å—Ç–≤–∏–µ]"\n'
            '2. –ü–æ –∏–º–µ–Ω–∏: "[–∏–º—è.exe] [–¥–µ–π—Å—Ç–≤–∏–µ] -n"\n\n'
            '–ü—Ä–∏–º–µ—Ä—ã:\n'
            '1234 kill\n'
            'explorer.exe kill -n\n'
            '5678 restart\n'
            'chrome.exe restart -n'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º: {e}")
        await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞: {str(e)}')
    finally:
        context.user_data['waiting_process_action'] = False

async def cmd_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ip = context.user_data.get("selected_pc")
    if not ip:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    context.user_data['command_mode'] = True
    await update.message.reply_text(
        "üíª –í–æ–π–¥–∏—Ç–µ –≤ —Ä–µ–∂–∏–º –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏. –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –æ–¥–Ω–∞ –∑–∞ –¥—Ä—É–≥–æ–π.\n"
        "–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤–≤–µ–¥–∏—Ç–µ 'exit'.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:\n"
        "ping google.com\n"
        "ipconfig /all\n"
        "dir C:\\\n"
        "cd C:\\Windows\n"
        "netstat -ano\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∫–æ–º–∞–Ω–¥—É:"
    )

async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in COMMAND_HISTORY or not COMMAND_HISTORY[user_id]:
        await update.message.reply_text("‚Ñπ –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ –ø—É—Å—Ç–∞")
        return
    
    history = "\n".join([f"{i+1}. {cmd}" for i, cmd in enumerate(COMMAND_HISTORY[user_id][-10:])])
    await update.message.reply_text(f"üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n{history}")

async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id in ACTIVE_COMMANDS:
        try:
            ACTIVE_COMMANDS[user_id].cancel()
            await update.message.reply_text("üö´ –ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã: {e}")
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É")
    else:
        await update.message.reply_text("‚Ñπ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ—Ç–º–µ–Ω—ã")

async def stream_command_output(update: Update, context: ContextTypes.DEFAULT_TYPE, ip: str, command: str, message_id: int):
    try:
        ip = context.user_data.get("selected_pc")
        user_id = update.message.from_user.id
        response = requests.post(
            f"http://{ip}:5000/command_stream",
            json={"command": command},
            stream=True,
            timeout=30
        )
        
        full_output = []
        chat_id = update.message.chat_id
        
        for line in response.iter_lines():
            if line:
                decoded_line = line.decode('utf-8')
                if decoded_line.startswith('data:'):
                    data = json.loads(decoded_line[5:].strip())
                    
                    if 'output' in data:
                        full_output.append(data['output'])
                        if len(full_output) > 20:
                            full_output = full_output[-20:]
                        await context.bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=message_id,
                            text=f"üîÑ {command}\n\n" + "\n".join(full_output[-10:])
                        )
                    elif 'error' in data:
                        full_output.append(f"ERROR: {data['error']}")
                        await context.bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=message_id,
                            text=f"‚ùå {command}\n\n" + "\n".join(full_output[-10:])
                        )
                    elif data.get('status') == 'completed':
                        ip = context.user_data.get("selected_pc")

                        await context.bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=message_id,
                            text=f"‚úÖ {command}\n\n" + "\n".join(full_output[-10:]) + f"\n\n–ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {data['exit_code']}"
                        )
                        break
        
        if user_id in ACTIVE_COMMANDS:
            del ACTIVE_COMMANDS[user_id]
        
    except asyncio.CancelledError:
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ {command} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await context.bot.edit_message_text(
            chat_id=update.message.chat_id,
            message_id=message_id,
            text=f"üö´ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞: {command}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞: {e}")
        ip = context.user_data.get("selected_pc")
        
        await context.bot.edit_message_text(
            chat_id=update.message.chat_id,
            message_id=message_id,
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {str(e)}"
        )
        if user_id in ACTIVE_COMMANDS:
            del ACTIVE_COMMANDS[user_id]

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.message.from_user.id
        
        if context.user_data.get('waiting_process_action'):
            await handle_process_action(update, context)
        elif context.user_data.get('waiting_new_process'):
            ip = context.user_data.get("selected_pc")
            if not ip:
                await update.message.reply_text("‚ùå –ö–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω!")
                return
            
            command_text = update.message.text.strip()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∫–æ–Ω—Ü–µ —Ü–∏—Ñ—Ä–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π)
            import re
            match = re.search(r'^(.*)\s+(\d+)$', command_text)
            
            if match:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
                base_command = match.group(1).strip()
                count = int(match.group(2))
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                if count > 100:
                    await update.message.reply_text("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—Å–∫–æ–≤ - 100")
                    context.user_data["waiting_new_process"] = False
                    return
                
                if count <= 0:
                    await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                    context.user_data["waiting_new_process"] = False
                    return
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
                success_count = 0
                for i in range(count):
                    try:
                        response = requests.post(
                            f"http://{ip}:5000/command",
                            json={"command": f"start {base_command}"},
                            timeout=10
                        )
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                        if response.status_code == 200:
                            success_count += 1
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ {i+1}): {e}")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
                
                await update.message.reply_text(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ {success_count} –∏–∑ {count} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {base_command}")
            else:
                # –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
                try:
                    response = requests.post(
                        f"http://{ip}:5000/command",
                        json={"command": f"start {command_text}"},
                        timeout=10
                    )
                    await update.message.reply_text(response.json().get("status", "–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω"))
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
                    await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å")
            
            context.user_data["waiting_new_process"] = False

        elif context.user_data.get('command_mode', False):
            command = update.message.text.strip()
            if command.lower() == 'exit':
                context.user_data['command_mode'] = False
                await update.message.reply_text("üö™ –†–µ–∂–∏–º –∫–æ–º–∞–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cmd")
                return
            
            ip = context.user_data.get("selected_pc")
            if not ip:
                await update.message.reply_text("‚ùå –ö–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω!")
                return
            
            if user_id not in COMMAND_HISTORY:
                COMMAND_HISTORY[user_id] = []
            COMMAND_HISTORY[user_id].append(command)
            
            msg = await update.message.reply_text(f"‚è≥ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {command}")
            
            try:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã cd –æ—Ç–¥–µ–ª—å–Ω–æ
                if command.startswith('cd '):
                    dir_name = command[3:].strip()
                    response = requests.post(
                        f"http://{ip}:5000/command",
                        json={"command": f"explorer list {dir_name}"},
                        timeout=10
                    )
                    
                    if response.status_code == 200:
                        data = response.json()
                        if data.get("status") == "success":
                            context.user_data["current_path"] = data.get("current_path", dir_name)
                            await msg.edit_text(f"‚úÖ –ü–µ—Ä–µ—à—ë–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {dir_name}")
                        else:
                            await msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {data.get('message', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–º–µ–Ω–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é')}")
                    else:
                        await msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–º–µ–Ω–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –ø–æ—Ç–æ–∫–æ–≤—ã–º –≤—ã–≤–æ–¥–æ–º
                elif command.startswith(('ping', 'tracert', 'nslookup', 'netstat')):
                    stream_task = asyncio.create_task(
                        stream_command_output(update, context, ip, command, msg.message_id)
                    )
                    ACTIVE_COMMANDS[user_id] = stream_task
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
                else:
                    response = requests.post(
                        f"http://{ip}:5000/command",
                        json={"command": command},
                        timeout=30
                    )
                    result = response.json().get("output", response.json().get("status", "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"))
                    await msg.edit_text(f"‚úÖ {command}\n\n{result}")
            except Exception as e:
                await msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}")
        else:
            await update.message.reply_text("‚Ñπ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

async def handle_button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    computers = load_computers()
    
    try:
        if data.startswith("select_"):
            computer_name = data[7:]
            if computer_name in computers:
                ip = computers[computer_name]
                is_online = await check_computer_status(ip)
                
                if not is_online:
                    await query.edit_message_text(f"‚ùå –ö–æ–º–ø—å—é—Ç–µ—Ä {computer_name} —Å–µ–π—á–∞—Å –æ—Ñ—Ñ–ª–∞–π–Ω")
                    return
                    
                context.user_data["selected_pc"] = ip
                context.user_data["computer_name"] = computer_name
                
                keyboard = [
                    [InlineKeyboardButton("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç", callback_data="screenshot"),
                     InlineKeyboardButton("üìä –ü—Ä–æ—Ü–µ—Å—Å—ã", callback_data="processes")],
                    # [InlineKeyboardButton("üìÇ –ü—Ä–æ–≤–æ–¥–Ω–∏–∫", callback_data="explorer")],
                    [InlineKeyboardButton("üîå –í—ã–∫–ª—é—á–∏—Ç—å", callback_data="shutdown"),
                     InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", callback_data="restart")],
                    [InlineKeyboardButton("üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data="lock"),
                     InlineKeyboardButton("üñ• –í—ã–∫–ª—é—á–∏—Ç—å —ç–∫—Ä–∞–Ω", callback_data="screen_off")],
                    [InlineKeyboardButton("üíª –í–∫–ª—é—á–∏—Ç—å —ç–∫—Ä–∞–Ω", callback_data="screen_on")],
                    [InlineKeyboardButton("‚ûï –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å", callback_data="start_process")],
                    [InlineKeyboardButton("üîí –ó–∞–ø—É—Å—Ç–∏—Ç—å winlocker", callback_data="run_winlocker")],
                    [InlineKeyboardButton("üîì –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å winlocker", callback_data="stop_winlocker")],
                    [InlineKeyboardButton("üíª –ö–æ–º–∞–Ω–¥–Ω—ã–π —Ä–µ–∂–∏–º", callback_data="cmd_mode")],
                    [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥", callback_data="show_history")],
                    [InlineKeyboardButton("üñ± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="control_menu")],
                    # [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"select_{computer_name}")]
                    [InlineKeyboardButton("‚ùå–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø—å—Ç–µ—Ä–∞", callback_data=f"load_computers")]
                ]
                await query.edit_message_text(
                    text=f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º: {computer_name} (üü¢ –û–Ω–ª–∞–π–Ω)",
                    reply_markup=InlineKeyboardMarkup(keyboard))
        
        elif data == "processes":
            await show_processes(query, context)
        
        elif data in ("next_processes", "prev_processes"):
            await handle_process_pagination(update, context)
        
        elif data == "start_process":
            context.user_data["waiting_new_process"] = True
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞:")

                    
        elif data == "load_computers":
            try:
                computers = load_computers()
                if not computers:
                    await query.edit_message_text("üîç –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤")
                    return

                status_messages = []
                for name, ip in computers.items():
                    is_online = await check_computer_status(ip)
                    status = "üü¢ –û–Ω–ª–∞–π–Ω" if is_online else "üî¥ –û—Ñ—Ñ–ª–∞–π–Ω"
                    status_messages.append(f"{name} ({ip}) - {status}")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                await query.edit_message_text(
                    "üìä –°—Ç–∞—Ç—É—Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤:\n" + "\n".join(status_messages)
                )

                keyboard = [
                    [InlineKeyboardButton(f"{name} ({ip})", callback_data=f"select_{name}")]
                    for name, ip in computers.items()
                ]
                await query.message.reply_text( # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                    "üñ• –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                # –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, —Ç–∞–∫ –∫–∞–∫ –º—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É
                context.user_data.pop("selected_pc", None)
                context.user_data.pop("computer_name", None)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤: {e}")
                await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é")
       
       

        elif data == "control_menu":
            keyboard = [
                [InlineKeyboardButton("üñ± –ú—ã—à—å", callback_data="control_mouse")],
                [InlineKeyboardButton("‚å® –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞", callback_data="control_keyboard")]
            ]
            await query.edit_message_text(
                text="–í—ã–±–µ—Ä–∏—Ç–µ, —á–µ–º —Ö–æ—Ç–∏—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

        elif data == "control_mouse":
            keyboard = [
                [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="control_menu")],
                [InlineKeyboardButton("üñ± –õ–ö–ú", callback_data="mouse_click_left")],
                [InlineKeyboardButton("üñ± –ü–ö–ú", callback_data="mouse_click_right")]
            ]
            await query.edit_message_text(
                text="üñ± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

        elif data in ("mouse_click_left", "mouse_click_right"):
            ip = context.user_data.get("selected_pc")
            if not ip:
                await query.edit_message_text("‚ùå –ö–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω!")
                return
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
                mouse_command = "mouse_left_click" if data == "mouse_click_left" else "mouse_right_click"
                
                response = requests.post(
                    f"http://{ip}:5000/command",
                    json={"command": mouse_command},
                    timeout=10
                )
                result_text = response.json().get("status", "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                await query.edit_message_text(f"‚úÖ {result_text}")
                # –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –º—ã—à–∏
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç –∏–ª–∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
                keyboard = [
                    [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="control_menu")],
                    [InlineKeyboardButton("üñ± –õ–ö–ú", callback_data="mouse_click_left")],
                    [InlineKeyboardButton("üñ± –ü–ö–ú", callback_data="mouse_click_right")]
                ]
                await query.message.reply_text( # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –º—ã—à–∏
                    text="üñ± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã –º—ã—à–∏: {e}")
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–º–ø—å—é—Ç–µ—Ä—É")

        elif data == "control_keyboard":
            keyboard = [
                [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="control_menu")],
                [InlineKeyboardButton("‚Ü≤ Enter", callback_data="key_enter")],
                [InlineKeyboardButton("‚å´ Backspace", callback_data="key_backspace")],
                [InlineKeyboardButton("‚Üπ Tab", callback_data="key_tab")],
                [InlineKeyboardButton(" Esc", callback_data="key_escape")],
                [InlineKeyboardButton("‚Üë", callback_data="key_up")],
                [InlineKeyboardButton("‚Üê", callback_data="key_left"), InlineKeyboardButton("‚Üì", callback_data="key_down"), InlineKeyboardButton("‚Üí", callback_data="key_right")],
                [InlineKeyboardButton("Ctrl+C", callback_data="key_ctrl_c"), InlineKeyboardButton("Ctrl+V", callback_data="key_ctrl_v")],
                [InlineKeyboardButton("Ctrl+A", callback_data="key_ctrl_a"), InlineKeyboardButton("Ctrl+Z", callback_data="key_ctrl_z")],
                [InlineKeyboardButton("Alt+Tab", callback_data="key_alt_tab")],
                [InlineKeyboardButton(" Windows", callback_data="key_win")]
            ]
            await query.edit_message_text(
                text="‚å® –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π:")
            
        
        elif data == "cmd_mode":
            ip = context.user_data.get("selected_pc")
            if not ip:
                await query.edit_message_text("‚ùå –ö–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω!")
                return
            
            context.user_data['command_mode'] = True
            await query.edit_message_text(
                "üíª –í–æ–π–¥–∏—Ç–µ –≤ —Ä–µ–∂–∏–º –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏. –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –æ–¥–Ω–∞ –∑–∞ –¥—Ä—É–≥–æ–π.\n"
                "–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤–≤–µ–¥–∏—Ç–µ 'exit'.\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:\n"
                "ping google.com\n"
                "ipconfig /all\n"
                "dir C:\\\n"
                "cd C:\\Windows\n"
                "netstat -ano\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∫–æ–º–∞–Ω–¥—É:"
            )
        
        elif data == "show_history":
            user_id = query.from_user.id
            if user_id not in COMMAND_HISTORY or not COMMAND_HISTORY[user_id]:
                await query.edit_message_text("‚Ñπ –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ –ø—É—Å—Ç–∞")
                return
            
            history = "\n".join([f"{i+1}. {cmd}" for i, cmd in enumerate(COMMAND_HISTORY[user_id][-10:])])
            await query.edit_message_text(f"üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n{history}")
        
        elif data == "run_winlocker":
            ip = context.user_data.get("selected_pc")
            if not ip:
                await query.edit_message_text("‚ùå –ö–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω!")
                return
            
            try:
                ip = context.user_data.get("selected_pc")

                response = requests.post(
                    f"http://{ip}:5000/command",
                    json={"command": "start_winlocker"},
                    timeout=10
                )
                await query.edit_message_text(f"‚úÖ {response.json().get('status', 'winlocker –∑–∞–ø—É—â–µ–Ω')}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ winlocker: {e}")
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å winlocker")

        elif data == "stop_winlocker":
            ip = context.user_data.get("selected_pc")
            if not ip:
                await query.edit_message_text("‚ùå –ö–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω!")
                return
            
            try:
                response = requests.post(
                    f"http://{ip}:5000/command",
                    json={"command": "stop_winlocker"},
                    timeout=10
                )
                await query.edit_message_text(f"‚úÖ {response.json().get('status', 'winlocker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ winlocker: {e}")
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å winlocker")

        elif data == "explorer":
            ip = context.user_data.get("selected_pc")
            if not ip:
                await query.edit_message_text("‚ùå –ö–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω!")
                return
            
            try:
                response = requests.post(
                    f"http://{ip}:5000/command",
                    json={"command": "explorer list"},
                    timeout=10
                )
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get("status") == "success":
                        files = data.get("files", [])
                        dirs = data.get("directories", [])
                        drive_info = data.get("drive_info", {})
                        
                        message = "üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:\n\n"
                        if drive_info:
                            message += f"üíΩ –î–∏—Å–∫ {drive_info.get('drive', '')} ({drive_info.get('label', '')})\n"
                            message += f"üî¢ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: {drive_info.get('serial', '')}\n\n"
                        
                        message += "üìÅ –ü–∞–ø–∫–∏:\n" + "\n".join([f"- {d}" for d in dirs]) + "\n\n"
                        message += "üìÑ –§–∞–π–ª—ã:\n" + "\n".join([f"- {f}" for f in files])
                        
                        keyboard = [
                            [InlineKeyboardButton("‚¨Ü –ù–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ", callback_data="explorer_up")],
                            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="explorer_refresh")]
                        ]
                        
                        for d in dirs:
                            keyboard.append([InlineKeyboardButton(f"üìÅ {d}", callback_data=f"explorer_dir_{d}")])
                        
                        context.user_data["current_path"] = data.get("current_path", "")
                        
                        await query.edit_message_text(
                            text=message,
                            reply_markup=InlineKeyboardMarkup(keyboard))
                    else:
                        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                else:
                    await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–º–ø—å—é—Ç–µ—Ä—É")
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        
        elif data.startswith("explorer_dir_"):
            ip = context.user_data.get("selected_pc")

            directory = data[13:]
            current_path = context.user_data.get("current_path", "")
            new_path = os.path.join(current_path, directory)
            
            try:
                response = requests.post(
                    f"http://{ip}:5000/command",
                    json={"command": f"explorer list {new_path}"},
                    timeout=10
                )
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get("status") == "success":
                        files = data.get("files", [])
                        dirs = data.get("directories", [])
                        drive_info = data.get("drive_info", {})
                        
                        message = f"üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏: {new_path}\n\n"
                        if drive_info:
                            message += f"üíΩ –î–∏—Å–∫ {drive_info.get('drive', '')} ({drive_info.get('label', '')})\n\n"
                        
                        message += "üìÅ –ü–∞–ø–∫–∏:\n" + "\n".join([f"- {d}" for d in dirs]) + "\n\n"
                        message += "üìÑ –§–∞–π–ª—ã:\n" + "\n".join([f"- {f}" for f in files])
                        
                        keyboard = [
                            [InlineKeyboardButton("‚¨Ü –ù–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ", callback_data="explorer_up")],
                            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="explorer_refresh")]
                        ]
                        
                        for d in dirs:
                            keyboard.append([InlineKeyboardButton(f"üìÅ {d}", callback_data=f"explorer_dir_{d}")])
                        
                        for f in files:
                            keyboard.append([InlineKeyboardButton(f"üìÑ {f}", callback_data=f"explorer_file_{f}")])
                        
                        context.user_data["current_path"] = new_path
                        
                        await query.edit_message_text(
                            text=message,
                            reply_markup=InlineKeyboardMarkup(keyboard))
                    else:
                        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                else:
                    await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–º–ø—å—é—Ç–µ—Ä—É")
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ø–∞–ø–∫–∞–º: {e}")
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        
        elif data == "explorer_up":
            ip = context.user_data.get("selected_pc")

            current_path = context.user_data.get("current_path", "")
            if current_path:
                parent_path = os.path.dirname(current_path)
                ip = context.user_data.get("selected_pc")
                
                try:
                    response = requests.post(
                        f"http://{ip}:5000/command",
                        json={"command": f"explorer list {parent_path}"},
                        timeout=10
                    )
                    
                    if response.status_code == 200:
                        data = response.json()
                        if data.get("status") == "success":
                            files = data.get("files", [])
                            dirs = data.get("directories", [])
                            drive_info = data.get("drive_info", {})
                            
                            message = f"üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏: {parent_path}\n\n"
                            if drive_info:
                                message += f"üíΩ –î–∏—Å–∫ {drive_info.get('drive', '')} ({drive_info.get('label', '')})\n\n"
                            
                            message += "üìÅ –ü–∞–ø–∫–∏:\n" + "\n".join([f"- {d}" for d in dirs]) + "\n\n"
                            message += "üìÑ –§–∞–π–ª—ã:\n" + "\n".join([f"- {f}" for f in files])
                            
                            keyboard = []
                            if parent_path:
                                keyboard.append([InlineKeyboardButton("‚¨Ü –ù–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ", callback_data="explorer_up")])
                            keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="explorer_refresh")])
                            
                            for d in dirs:
                                keyboard.append([InlineKeyboardButton(f"üìÅ {d}", callback_data=f"explorer_dir_{d}")])
                            
                            for f in files:
                                keyboard.append([InlineKeyboardButton(f"üìÑ {f}", callback_data=f"explorer_file_{f}")])
                            
                            context.user_data["current_path"] = parent_path
                            
                            await query.edit_message_text(
                                text=message,
                                reply_markup=InlineKeyboardMarkup(keyboard))
                        else:
                            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    else:
                        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–º–ø—å—é—Ç–µ—Ä—É")
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ: {e}")
                    await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        
        elif data == "explorer_refresh":
            current_path = context.user_data.get("current_path", "")
            command = "explorer list" if not current_path else f"explorer list {current_path}"
            
            try:
                response = requests.post(
                    f"http://{ip}:5000/command",
                    json={"command": command},
                    timeout=10
                )
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get("status") == "success":
                        files = data.get("files", [])
                        dirs = data.get("directories", [])
                        drive_info = data.get("drive_info", {})
                        
                        message = f"üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏: {current_path if current_path else '–∫–æ—Ä–Ω–µ–≤–∞—è'}\n\n"
                        if drive_info:
                            message += f"üíΩ –î–∏—Å–∫ {drive_info.get('drive', '')} ({drive_info.get('label', '')})\n\n"
                        
                        message += "üìÅ –ü–∞–ø–∫–∏:\n" + "\n".join([f"- {d}" for d in dirs]) + "\n\n"
                        message += "üìÑ –§–∞–π–ª—ã:\n" + "\n".join([f"- {f}" for f in files])
                        
                        keyboard = []
                        if current_path:
                            keyboard.append([InlineKeyboardButton("‚¨Ü –ù–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ", callback_data="explorer_up")])
                        keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="explorer_refresh")])
                        
                        for d in dirs:
                            keyboard.append([InlineKeyboardButton(f"üìÅ {d}", callback_data=f"explorer_dir_{d}")])
                        
                        for f in files:
                            keyboard.append([InlineKeyboardButton(f"üìÑ {f}", callback_data=f"explorer_file_{f}")])
                        
                        await query.edit_message_text(
                            text=message,
                            reply_markup=InlineKeyboardMarkup(keyboard))
                    else:
                        ip = context.user_data.get("selected_pc")

                        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                else:
                    await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–º–ø—å—é—Ç–µ—Ä—É")
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        
        elif data.startswith("explorer_file_"):
            filename = data[14:]
            current_path = context.user_data.get("current_path", "")
            filepath = os.path.join(current_path, filename)
            
            keyboard = [
                [InlineKeyboardButton("‚¨á –°–∫–∞—á–∞—Ç—å", callback_data=f"download_{filepath}")],
                [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{filepath}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="explorer_back")]
            ]
            
            await query.edit_message_text(
                text=f"–§–∞–π–ª: {filename}\n–ü—É—Ç—å: {filepath}",
                reply_markup=InlineKeyboardMarkup(keyboard))
        
        elif data == "explorer_back":
            ip = context.user_data.get("selected_pc")
            
            current_path = context.user_data.get("current_path", "")
            command = "explorer list" if not current_path else f"explorer list {current_path}"
            
            try:
                response = requests.post(
                    f"http://{ip}:5000/command",
                    json={"command": command},
                    timeout=10
                )
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get("status") == "success":
                        files = data.get("files", [])
                        dirs = data.get("directories", [])
                        drive_info = data.get("drive_info", {})
                        
                        message = f"üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏: {current_path if current_path else '–∫–æ—Ä–Ω–µ–≤–∞—è'}\n\n"
                        if drive_info:
                            message += f"üíΩ –î–∏—Å–∫ {drive_info.get('drive', '')} ({drive_info.get('label', '')})\n\n"
                        
                        message += "üìÅ –ü–∞–ø–∫–∏:\n" + "\n".join([f"- {d}" for d in dirs]) + "\n\n"
                        message += "üìÑ –§–∞–π–ª—ã:\n" + "\n".join([f"- {f}" for f in files])
                        
                        keyboard = []
                        if current_path:
                            keyboard.append([InlineKeyboardButton("‚¨Ü –ù–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ", callback_data="explorer_up")])
                        keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="explorer_refresh")])
                        
                        for d in dirs:
                            keyboard.append([InlineKeyboardButton(f"üìÅ {d}", callback_data=f"explorer_dir_{d}")])
                        
                        for f in files:
                            keyboard.append([InlineKeyboardButton(f"üìÑ {f}", callback_data=f"explorer_file_{f}")])
                        
                        ip = context.user_data.get("selected_pc")
                        await query.edit_message_text(
                            text=message,
                            reply_markup=InlineKeyboardMarkup(keyboard))
                    else:
                        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                else:
                    await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–º–ø—å—é—Ç–µ—Ä—É –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–Ω–æ–≤–µ—Ä—å—Ç–µ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ")
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Ñ–∞–π–ª–æ–≤: {e}")
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        
        elif data.startswith("download_"):
            filepath = data[9:]
            ip = context.user_data.get("selected_pc")

            try:
                response = requests.post(
                    f"http://{ip}:5000/command",
                    json={"command": f"explorer download {filepath}"},
                    stream=True,
                    timeout=30
                )
                
                if response.status_code == 200:
                    filename = os.path.basename(filepath)
                    temp_file = os.path.join(TEMP_DIR, filename)
                    
                    with open(temp_file, "wb") as f:
                        for chunk in response.iter_content(chunk_size=8192):
                            if chunk:
                                f.write(chunk)
                    
                    await query.message.reply_document(
                        document=open(temp_file, "rb"),
                        caption=f"–§–∞–π–ª: {filename}"
                    )
                    
                    if os.path.exists(temp_file):
                        os.remove(temp_file)
                else:
                    await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª")
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {str(e)}")
        
        elif data.startswith("delete_"):
            filepath = data[7:]
            try:
                response = requests.post(
                    f"http://{ip}:5000/command",
                    json={"command": f"explorer delete {filepath}"},
                    timeout=10
                )
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get("status") == "success":
                        await query.edit_message_text(f"‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω: {filepath}")
                    else:
                        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {data.get('message', '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª')}")
                else:
                    await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª")
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")
        
        elif data == "screenshot":
            ip = context.user_data.get("selected_pc")
            if not ip:
                await query.edit_message_text("‚ùå –ö–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω!")
                return
            
            message = await query.message.reply_text("üîÑ –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç... (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥)")
            
            try:
                response = requests.post(
                    f"http://{ip}:5000/command",
                    json={"command": "screenshot"},
                    timeout=30
                )
                
                if response.status_code == 200:
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    temp_file = os.path.join(TEMP_DIR, f"temp_screenshot_{timestamp}.png")
                    
                    try:
                        with open(temp_file, "wb") as f:
                            f.write(response.content)
                        
                        if os.path.getsize(temp_file) == 0:
                            raise Exception("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
                            
                        await query.message.reply_photo(
                            photo=open(temp_file, "rb"),
                            caption=f"–°–∫—Ä–∏–Ω—à–æ—Ç —Å {context.user_data.get('computer_name', ip)}"
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
                        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
                    finally:
                        ip = context.user_data.get("selected_pc")

                        if os.path.exists(temp_file):
                            try:
                                os.remove(temp_file)
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
                    
                    await message.delete()
                else:
                    error_msg = response.json().get("status", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {error_msg}")
                    await message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {error_msg}")
                    
            except requests.exceptions.Timeout:
                logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
                await message.edit_text("‚åõ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
            except Exception as e:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
                await message.edit_text(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        
        else:
            ip = context.user_data.get("selected_pc")
            if not ip:
                await query.edit_message_text("‚ùå –ö–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω!")
                return
            
            try:
                requests.post(
                    f"http://{ip}:5000/command",
                    json={"command": data},
                    timeout=10
                )
                await query.edit_message_text(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ {data} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–º–ø—å—é—Ç–µ—Ä—É")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")

async def post_init(application):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    await application.bot.set_my_commands([
        ("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        ("cmd", "–í–æ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"),
        ("history", "–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥"),
        ("cancel", "–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–º–∞–Ω–¥—É")
    ])
    
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

def main():
    if "YOUR_TELEGRAM_BOT_TOKEN" in BOT_TOKEN:
        print("–û–®–ò–ë–ö–ê: –ó–∞–º–µ–Ω–∏—Ç–µ BOT_TOKEN –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω!")
        print("–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –≤ Telegram")
        return
    
    try:
        application = ApplicationBuilder() \
            .token(BOT_TOKEN) \
            .post_init(post_init) \
            .build()

        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("cmd", cmd_command))
        application.add_handler(CommandHandler("history", history_command))
        application.add_handler(CommandHandler("cancel", cancel_command))
        application.add_handler(CallbackQueryHandler(handle_button_click))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
        application.run_polling(
            poll_interval=3.0,
            timeout=30,
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        import time
        time.sleep(5)
        main()

if __name__ == '__main__':
    main()